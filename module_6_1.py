"""
Домашнее задание по теме "Зачем нужно наследование"

Цель: применить базовые знания о наследовании классов для решения задачи

Задача "Съедобное, несъедобное":
Разнообразие животного мира давно будоражит умы человечества. Царства, классы, виды... Почему бы и нам не попробовать
выстроить что-то подобное используя наследования классов?

Необходимо описать пример иерархии животного мира, используя классы и принцип наследования.

Создайте:
2 класса родителя: Animal, Plant
Для класса Animal атрибуты alive = True(живой) и fed = False(накормленный), name - индивидуальное название каждого
животного.
Для класса Plant атрибут edible = False(съедобность), name - индивидуальное название каждого растения

4 класса наследника:
Mammal, Predator для Animal.
Flower, Fruit для Plant.

У каждого из объектов класса Mammal и Predator должны быть атрибуты и методы:
eat(food) - метод, где food - это параметр, принимающий объекты классов растений.

Метод eat должен работать следующим образом:
Если переданное растение (food) съедобное - выводит на экран "<self.name> съел <food.name>", меняется атрибут fed на
True.
Если переданное растение (food) не съедобное - выводит на экран "<self.name> не стал есть <food.name>", меняется
атрибут alive на False.
Т.е если животному дать съедобное растение, то животное насытится, если не съедобное - погибнет.

У каждого объекта Fruit должен быть атрибут edible = True (переопределить при наследовании)

Создайте объекты классов и проделайте действия затронутые в примере результата работы программы.

Пункты задачи:
1. Создайте классы Animal и Plant с соответствующими атрибутами и методами
2. Создайте(+унаследуйте) классы Mammal, Predator, Flower, Fruit с соответствующими атрибутами и методами. При
необходимости переопределите значения атрибутов.
3. Создайте объекты этих классов.
"""


class Animal:
    """
    класс животные
    аттрибуты: alive = True(живой) - False(не живой); fed = True(сытый) - False(голодный);
    name - индивидуальное название каждого животного.
    """
    alive = True
    fed = False

    def __init__(self, name):
        self.name = name

    def eat(self, food):
        """
        eat(food) - метод, где food - это параметр, принимающий объекты классов растений.
        Метод eat должен работать следующим образом:
        Если переданное растение (food) съедобное - выводит на экран "<self.name> съел <food.name>", меняется атрибут
        fed на True.
        Если переданное растение (food) не съедобное - выводит на экран "<self.name> не стал есть <food.name>", меняется
        атрибут alive на False.
        Т.е если животному дать съедобное растение, то животное насытится, если не съедобное - погибнет
        :return:
        """
        if not food.edible:
            self.fed = False
            self.alive = False
            print(f'{self.name}, не стал есть ,{food.name}')
        else:
            self.fed = True
            self.alive = True
            print(f'{self.name}, съел ,{food.name}')


class Plant:
    """
    класс растений
    аттрибут: edible = True(съедобный) - False(не съедобный);
    name - индивидуальное название каждого растения
    """
    edible = False

    def __init__(self, name):
        self.name = name


class Mammal(Animal):
    """
    класс млекопитающих
    """


pass


class Predator(Animal):
    """
    класс хищников
    """


pass


class Flower(Plant):
    """
    класс цветов
    """
    edible = False


class Fruit(Plant):
    """
    класс фруктов
    """
    edible = True


if __name__ == '__main__':
    a1 = Predator('Волк с Уолл-Стрит')
    a2 = Mammal('Хатико')
    p1 = Flower('Цветик семицветик')
    p2 = Fruit('Заводной апельсин')

    print(a1.name)
    print(a2.name)
    print(p1.name)
    print(p2.name)

    print(f'{p1.name} имеет edible = True, поэтому съедобен' if p1.edible == True
          else f'{p1.name} имеет edible = False, поэтому не съедобен')
    a1.eat(p1)
    a2.eat(p1)
    print(f'{p2.name} имеет edible = True, поэтому съедобен' if p2.edible == True
          else f'{p2.name} имеет edible = False, поэтому не съедобен')
    a1.eat(p2)
    a2.eat(p2)
